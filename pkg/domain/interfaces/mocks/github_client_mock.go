// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/m-mizutani/shepherd/pkg/domain/interfaces"
	"sync"
)

// Ensure, that GitHubClientMock does implement interfaces.GitHubClient.
// If this is not the case, regenerate this file with moq.
var _ interfaces.GitHubClient = &GitHubClientMock{}

// GitHubClientMock is a mock implementation of interfaces.GitHubClient.
//
//	func TestSomethingThatUsesGitHubClient(t *testing.T) {
//
//		// make and configure a mocked interfaces.GitHubClient
//		mockedGitHubClient := &GitHubClientMock{
//			DownloadZipballFunc: func(ctx context.Context, owner string, repo string, ref string) ([]byte, error) {
//				panic("mock out the DownloadZipball method")
//			},
//		}
//
//		// use mockedGitHubClient in code that requires interfaces.GitHubClient
//		// and then make assertions.
//
//	}
type GitHubClientMock struct {
	// DownloadZipballFunc mocks the DownloadZipball method.
	DownloadZipballFunc func(ctx context.Context, owner string, repo string, ref string) ([]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// DownloadZipball holds details about calls to the DownloadZipball method.
		DownloadZipball []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Owner is the owner argument value.
			Owner string
			// Repo is the repo argument value.
			Repo string
			// Ref is the ref argument value.
			Ref string
		}
	}
	lockDownloadZipball sync.RWMutex
}

// DownloadZipball calls DownloadZipballFunc.
func (mock *GitHubClientMock) DownloadZipball(ctx context.Context, owner string, repo string, ref string) ([]byte, error) {
	if mock.DownloadZipballFunc == nil {
		panic("GitHubClientMock.DownloadZipballFunc: method is nil but GitHubClient.DownloadZipball was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Owner string
		Repo  string
		Ref   string
	}{
		Ctx:   ctx,
		Owner: owner,
		Repo:  repo,
		Ref:   ref,
	}
	mock.lockDownloadZipball.Lock()
	mock.calls.DownloadZipball = append(mock.calls.DownloadZipball, callInfo)
	mock.lockDownloadZipball.Unlock()
	return mock.DownloadZipballFunc(ctx, owner, repo, ref)
}

// DownloadZipballCalls gets all the calls that were made to DownloadZipball.
// Check the length with:
//
//	len(mockedGitHubClient.DownloadZipballCalls())
func (mock *GitHubClientMock) DownloadZipballCalls() []struct {
	Ctx   context.Context
	Owner string
	Repo  string
	Ref   string
} {
	var calls []struct {
		Ctx   context.Context
		Owner string
		Repo  string
		Ref   string
	}
	mock.lockDownloadZipball.RLock()
	calls = mock.calls.DownloadZipball
	mock.lockDownloadZipball.RUnlock()
	return calls
}
