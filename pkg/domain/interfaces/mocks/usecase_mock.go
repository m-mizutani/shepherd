// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/m-mizutani/shepherd/pkg/domain/interfaces"
	"github.com/m-mizutani/shepherd/pkg/domain/model"
	"sync"
)

// Ensure, that WebhookUseCaseMock does implement interfaces.WebhookUseCase.
// If this is not the case, regenerate this file with moq.
var _ interfaces.WebhookUseCase = &WebhookUseCaseMock{}

// WebhookUseCaseMock is a mock implementation of interfaces.WebhookUseCase.
//
//	func TestSomethingThatUsesWebhookUseCase(t *testing.T) {
//
//		// make and configure a mocked interfaces.WebhookUseCase
//		mockedWebhookUseCase := &WebhookUseCaseMock{
//			ProcessEventFunc: func(ctx context.Context, event *model.WebhookEvent) error {
//				panic("mock out the ProcessEvent method")
//			},
//		}
//
//		// use mockedWebhookUseCase in code that requires interfaces.WebhookUseCase
//		// and then make assertions.
//
//	}
type WebhookUseCaseMock struct {
	// ProcessEventFunc mocks the ProcessEvent method.
	ProcessEventFunc func(ctx context.Context, event *model.WebhookEvent) error

	// calls tracks calls to the methods.
	calls struct {
		// ProcessEvent holds details about calls to the ProcessEvent method.
		ProcessEvent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Event is the event argument value.
			Event *model.WebhookEvent
		}
	}
	lockProcessEvent sync.RWMutex
}

// ProcessEvent calls ProcessEventFunc.
func (mock *WebhookUseCaseMock) ProcessEvent(ctx context.Context, event *model.WebhookEvent) error {
	if mock.ProcessEventFunc == nil {
		panic("WebhookUseCaseMock.ProcessEventFunc: method is nil but WebhookUseCase.ProcessEvent was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Event *model.WebhookEvent
	}{
		Ctx:   ctx,
		Event: event,
	}
	mock.lockProcessEvent.Lock()
	mock.calls.ProcessEvent = append(mock.calls.ProcessEvent, callInfo)
	mock.lockProcessEvent.Unlock()
	return mock.ProcessEventFunc(ctx, event)
}

// ProcessEventCalls gets all the calls that were made to ProcessEvent.
// Check the length with:
//
//	len(mockedWebhookUseCase.ProcessEventCalls())
func (mock *WebhookUseCaseMock) ProcessEventCalls() []struct {
	Ctx   context.Context
	Event *model.WebhookEvent
} {
	var calls []struct {
		Ctx   context.Context
		Event *model.WebhookEvent
	}
	mock.lockProcessEvent.RLock()
	calls = mock.calls.ProcessEvent
	mock.lockProcessEvent.RUnlock()
	return calls
}
